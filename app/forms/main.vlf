Form MainForm
    size: [$SCREEN->width / 1.2, $SCREEN->height / 1.2]
    windowState: fwsMaximized
    startPosition: fspCenterScreen
    backgroundColor: clWhite

    caption: 'VoidStudio'

    ->icon->loadFromFile (APP_DIR .'/Icon.ico')

    SplitContainer ToolsPanel__Container
        dock: dsFill

        Orientation: 0
        SplitterDistance: MainForm->h - 180

    TabPage ToolsPanel__Log (text ('Лог'))
        ListBox ToolsPanel__LogList
            dock: dsFill

    TabPage ToolsPanel__Eval (text ('Выполнение кода'))
        Scintilla ToolsPanel__EvalEditor
            dock: dsFill

            syntax: 'syntax.json'

        Button ToolsPanel__EvalButton
            dock: dsBottom

            text: text ('Выполнить')

            ClickEvent:^ function ($self) use (ToolsPanel__EvalEditor $editor)
                {
                    file_put_contents ('system/last_eval.php', $editor->text);

                    eval ($editor->text);
                }

    TabControl ToolsPanel__ToolsList (ToolsPanel__Container->panel2)
        dock: dsFill

        ->items->addRange ([ToolsPanel__Log, ToolsPanel__Eval])

    ColumnHeader ComponentsNamesColumn (text ('Название компонента'))
        width: 268

    Panel PropertiesPanel
        dock: dsLeft
        width: 280

        TabPage PropertiesList__Page (text ('Свойства'))
            PropertyGrid PropertiesList__List
                dock: dsFill

                #^ В общем, тут прикол в том, что можно заранее создать компонент с именем какой-то формы, и будет пи%да
                
                    PropertyValueChangedEvent:^ function ($self, $args)
                    {
                        $args = new PropertyValueChangedEventArgs ($args);

                        if (VoidEngine::getProperty ($args->changedItem, 'Label') == '(Name)')
                            if (substr (VoidEngine::getProperty ($args->changedItem, 'Value'), 0, 4) == 'Form')
                            {
                                VoidStudioAPI::getObjects ('main')['Designer__'. _c(Designer__FormsList->selectedTab)->text .'Designer']->renameComponent ($self->selectedObject, $args->oldValue);

                                pre ('123');
                            }
                    }

        TabPage EventsList__Page (text ('События'))
            ListBox EventsList__Events
                dock: dsFill

        TabControl Properties__Items
            dock: dsFill

            ->items->addRange ([PropertiesList__Page, EventsList__Page])

        ComboBox PropertiesPanel__SelectedComponent
            dock: dsTop
            dropDownStyle: ddDropDownList

            ->items->add ('Form1')
            selectedItem: 'Form1'

            SelectedIndexChangedEvent:^ function ($self) use (PropertiesList__List $propertyGrid)
                {
                    $item = $self->selectedItem;

                    $propertyGrid->selectedObject = VoidStudioAPI::getObjects ('main')['Designer__'. _c(c('Designer__FormsList')->selectedTab)->text .'Designer']->getComponentByName ($item);
                }

            SelectionChangeCommittedEvent:^ function ($self)
                {
                    $designer = VoidStudioAPI::getObjects ('main')['Designer__'. _c(c('Designer__FormsList')->selectedTab)->text .'Designer'];
                    
                    $designer->setSelectedComponents ($designer->getComponentByName ($self->selectedItem));
                }

    TabPage Designer__Form1 (text ('Form1'))
        VoidDesigner Designer__Form1Designer (Designer__Form1, 'Form1', PropertiesList__List)

    TabControl Designer__FormsList (ToolsPanel__Container->panel1)
        dock: dsFill

        ->items->add (Designer__Form1)

        SelectedIndexChangedEvent:^ function ($self) use (PropertiesPanel__SelectedComponent $components)
            {
                $designer = VoidStudioAPI::getObjects ('main')['Designer__'. ($tab = _c($self->selectedTab)->text) .'Designer'];
                $designer->focus ();

                $components->items->clear ();
                $components->items->addRange (array_keys ($designer->objects));

                $components->selectedItem = $tab;
                $designer->setSelectedComponents ($designer->form);
            }

    ListView ComponentsList
        dock: dsRight
        width: 280

        fullRowSelect: true
        view: vwDetails

        ->columns->add (ComponentsNamesColumn)

        DoubleClickEvent:^ function ($self) use (Designer__FormsList $formsList)
            {
                $form      = _c($formsList->selectedTab)->text;
                $component = _c($self->selectedItems[0])->text;
                $designer  = VoidStudioAPI::getObjects ('main')['Designer__'. $form .'Designer'];

                if ($component == 'Form')
                {
                    $page     = new TabPage ($form = 'Form'. (substr ($form, 4) + 1));
                    $designer = new VoidDesigner ($page, $form, PropertiesList__List);

                    VoidStudioAPI::addObjects ('main', ['Designer__'. $form .'Designer' => $designer]);

                    $formsList->items->add ($page);
                    $formsList->selectedTab = $page->selector;

                    $name     = $page->text;
                    $selector = $designer->form;
                }

                else $selector = $designer->createComponent (new WFObject ("System.Windows.Forms.$component"), ($name = $component . time () . rand (100000, 999999)));

                $components = c('PropertiesPanel__SelectedComponent');

                $components->items->clear ();
                $components->items->addRange (array_keys ($designer->objects));

                $components->selectedItem = $name;
                $designer->setSelectedComponents ($selector);
            }

    MenuItem Menu__studio (text ('Среда'))
        MenuItem Menu__studio_restart (text ('Перезапустить'))
            ClickEvent:^ function ($self)
                {
                    $APPLICATION->restart ();
                }

        MenuItem Menu__studio_about (text ('О программе'))
            ClickEvent:^ function ($self)
                {
                    $msg = new MessageBox;

                    $msg->show
                    (
                        text ("Авторы сие произведения:\n\nАндрей Кусов (vk.com/postmessagea) - главный разработчик\nНикита Подвирный (vk.com/technomindlp) - разработчик\n\nWinForms PHP, vk.com/winforms"),

                        text ('О программе')
                    );
                }

    #^ Здесь тупая ошибка: я не могу обратиться к ->items->addRange... т.к. этот метод вызывается от имени
       Menu__studio_about. Типо, опять фиксить и всё такое, но мне влом пока что

    MenuItem Menu__studio
        ->items->addRange ([Menu__studio_restart, Menu__studio_about])

    MenuItem Menu__project (text ('Проект'))
        MenuItem Menu__project_build (text ('Собрать'))
            ClickEvent:^ function ($self)
                {
                    VoidStudioAPI::getObjects ('build')['MainForm']->showDialog ();
                }

    MenuItem Menu__project
        ->items->add (Menu__project_build)

    MainMenu Menu
        ->items->addRange ([Menu__studio, Menu__project])

#^ И тут тоже достаточно тупая ошибка:
   Я почему-то не могу обратиться к объект, который только что создал

Form MainForm
    menu: Menu

    ShownEvent:^ function ($self)
        {
            if (file_exists ('system/last_eval.php'))
                ToolsPanel__EvalEditor->text = file_get_contents ('system/last_eval.php');

            PropertiesList__List->selectedObject = Designer__Form1Designer->form;

            $time = round (microtime (true) - $GLOBALS['__debug']['start_time'], 4);

            ToolsPanel__LogList->items->add (text ('VoidStudio запущен за '. ($time > 0.5 ? $time : '[мало]') .' секунд'));
        }