Form MainForm
    size: [$SCREEN->width / 1.2, $SCREEN->height / 1.2]
    windowState: fwsMaximized
    startPosition: fspCenterScreen
    backgroundColor: clWhite

    caption: 'VoidStudio'

    ->icon->loadFromFile (APP_DIR .'/Icon.ico')

    SplitContainer ToolsPanel__Container
        dock: dsFill

        Orientation: 0
        SplitterDistance: MainForm->h - 180

    TabPage ToolsPanel__Log (text ('Лог'))
        ListBox ToolsPanel__LogList
            dock: dsFill

    TabPage ToolsPanel__Eval (text ('Выполнение кода'))
        FastColoredTextBox ToolsPanel__EvalEditor
            dock: dsFill

            language: langPHP
            wordWrap: true

            # syntax: 'syntax.json'

        Button ToolsPanel__EvalButton
            dock: dsBottom

            text: text ('Выполнить')

            ClickEvent:^ function ($self) use (ToolsPanel__EvalEditor $editor)
                {
                    file_put_contents ('system/last_eval.php', $editor->text);

                    eval ($editor->text);
                }

    TabControl ToolsPanel__ToolsList (ToolsPanel__Container->panel2)
        dock: dsFill

        ->items->addRange ([ToolsPanel__Log, ToolsPanel__Eval])

    Panel PropertiesPanel
        dock: dsLeft
        width: 280

        TabPage PropertiesList__Page (text ('Свойства'))
            PropertyGrid PropertiesList__List
                dock: dsFill
                
                PropertyValueChangedEvent:^ function ($self, $args)
                    {
                        // $args        = new PropertyValueChangedEventArgs ($args);
                        $designer    = VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer'];
                        $objectClass = $self->selectedObject->getType ()->toString ();
                        $newValue    = $args->changedItem->value;

                        if ($args->changedItem->label == '(Name)')
                        {
                            if ($objectClass == 'System.Windows.Forms.Form')
                            {
                                $designer->renameComponent ($self->selectedObject->selector, $args->oldValue, $args->oldValue);
                                $self->selectedObject->name = $args->oldValue;

                                pre (text ('Нельзя переименовывать формы проекта'));
                            }
                            
                            elseif (substr ($newValue, 0, 4) == 'Form')
                                {
                                    $designer->renameComponent ($self->selectedObject->selector, $args->oldValue, $args->oldValue);
                                    $self->selectedObject->name = $args->oldValue;

                                    pre (text ('Объекту нельзя задать название, начинающееся на "Form"'));
                                }

                            else try
                            {
                                $designer->renameComponent ($self->selectedObject->selector, $newValue, $args->oldValue);
                                $self->selectedObject->name = $newValue;
                            }

                            catch (\Throwable $e)
                            {
                                $designer->renameComponent ($self->selectedObject->selector, $args->oldValue, $args->oldValue);
                                $self->selectedObject->name = $args->oldValue;

                                pre (text ('Произошла ошибка при попытке переименования объекта'));
                            }

                            $components = c('PropertiesPanel__SelectedComponent');

                            $components->items->clear ();
                            $components->items->addRange (array_keys ($designer->objects));

                            $components->selectedItem = $self->selectedObject->name;
                        }
                    }

        TabPage EventsList__Page (text ('События'))
            ListBox EventsList__ActiveEvents
                dock: dsFill

                font: ['Microsoft Sans Serif', 10]

                KeyDownEvent:^ function ($self, $args)
                    {
                        if ($args->keycode == 46 && ($event = $self->selectedItem))
                        {
                            Events::removeObjectEvent (PropertiesList__List->selectedObject->selector, $event);

                            $self->items->remove ($self->items->indexOf ($event));    
                        }
                    }

                DoubleClickEvent:^ function ($self)
                    {
                        if ($event = $self->selectedItem)
                            VoidStudioAPI::openEventEditor (PropertiesList__List->selectedObject->selector, $event);
                    }

            Button EventsList__AddEvent
                dock: dsTop
                flatStyle: flSystem

                caption: text ('Добавить')
                
                ClickEvent:^ function ($self) use (EventsList__ActiveEvents $eventsList)
                    {
                        $designer = VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer'];
                        $selected = VoidEngine::callMethod ($designer->selector, 'GetSelectedComponents');

                        if ($selected !== null && VoidEngine::getProperty ($selected, 'Length') > 1)
                            pre (text ('Вы не можете добавить событие нескольким объектам'));

                        else
                        {
                            $events = array_diff (EngineAdditions::getObjectEvents ($object = PropertiesList__List->selectedObject->selector), $eventsList->items->names);
                            sort ($events);

                            $menu = new ContextMenu;
                            $menu->items->addRange (array_map (function ($name) use ($object, $eventsList)
                            {
                                $item = new MenuItem ($name);

                                $item->clickEvent = function ($self) use ($name, $object, $eventsList)
                                {
                                    $eventsList->items->add ($name);

                                    Events::reserveObjectEvent ($object, $name);
                                };

                                return $item;
                            }, $events));

                            $menu->show (MainForm->selector, (new WFClass ('System.Windows.Forms.Cursor'))->position->selector);
                        }
                    }

        TabControl Properties__Items
            dock: dsFill

            ->items->addRange ([PropertiesList__Page, EventsList__Page])

        ComboBox PropertiesPanel__SelectedComponent
            dock: dsTop
            dropDownStyle: ddDropDownList

            ->items->add ('Form1')
            selectedItem: 'Form1'

            SelectedIndexChangedEvent:^ function ($self) use (PropertiesList__List $propertyGrid)
                {
                    $item = $self->selectedItem;

                    $propertyGrid->selectedObject = VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer']->getComponentByName ($item);
                }

            SelectionChangeCommittedEvent:^ function ($self)
                {
                    $designer = VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer'];
                    
                    $designer->setSelectedComponents ($designer->getComponentByName ($self->selectedItem));
                }

    TabPage Designer__Form1 (text ('Form1'))
        # VoidDesigner Designer__Form1Designer (Designer__Form1, 'Form1', PropertiesList__List, EventsList__ActiveEvents)

    TabControl Designer__FormsList (ToolsPanel__Container->panel1)
        dock: dsFill

        ->items->add (Designer__Form1)

        SelectedIndexChangedEvent:^ function ($self) use (PropertiesPanel__SelectedComponent $components)
            {
                $designer = VoidStudioAPI::getObjects ('main')['Designer__'. ($tab = $self->selectedTab->text) .'Designer'];
                $designer->focus ();

                $components->items->clear ();
                $components->items->addRange (array_keys ($designer->objects));

                $components->selectedItem = $tab;
                $designer->setSelectedComponents ($designer->form->selector);
                # $designer->setSelectedComponents ($designer->form);
            }

    VoidDesigner Designer__Form1Designer (Designer__Form1, 'Form1', PropertiesList__List, EventsList__ActiveEvents, PropertiesPanel__SelectedComponent, Designer__FormsList)
        #^ ComponentAddedEvent:^ function ($self, $args)
            {
                $components = c('PropertiesPanel__SelectedComponent');

                $components->items->clear ();
                $components->items->addRange (array_keys ($self->objects));

                $components->selectedItem = $GLOBALS['new_component'];
                $self->setSelectedComponents ($args->component);

                unset ($GLOBALS['new_component']);
            }

    ColumnHeader ComponentsNamesColumn (text ('Название компонента'))
        width: 216

    ListView ComponentsList
        dock: dsRight
        width: 220

        fullRowSelect: true
        view: vwDetails

        ->columns->add (ComponentsNamesColumn)

        #^ ClickEvent:^ function ($self) use (Designer__FormsList $formsList)
            {
                $component = _c($self->selectedItems[0])->text;

                if ($component != 'Form')
                {
                    $designer = VoidStudioAPI::getObjects ('main')['Designer__'. $formsList->selectedTab->text .'Designer'];

                    $designer->setTypeForCreationOnClick (VoidEngine::objectType (new ObjectType ("System.Windows.Forms.$component")));

                    $i = 1;
                    while (isset ($designer->objects[$name = $component . $i]))
                        ++$i;

                    $GLOBALS['new_component'] = $name;
                }
            }

        DoubleClickEvent:^ function ($self) use (Designer__FormsList $formsList)
            {
                $form      = $formsList->selectedTab->text;
                $component = _c($self->selectedItems[0])->text;
                $designer  = VoidStudioAPI::getObjects ('main')['Designer__'. $form .'Designer'];

                if ($component == 'Form')
                {
                    $i = substr ($form, 4) + 1;
                    while (isset (VoidStudioAPI::getObjects ('main')['Designer__'. ($form = 'Form'. $i) .'Designer']))
                        ++$i;

                    $page     = new TabPage ($form);
                    $designer = new VoidDesigner ($page, $form, PropertiesList__List, EventsList__ActiveEvents, PropertiesPanel__SelectedComponent, $formsList);
                    # $designer = new VoidDesigner ($page, $form, PropertiesList__List, EventsList__ActiveEvents);

                    VoidStudioAPI::addObjects ('main', ['Designer__'. $form .'Designer' => $designer]);

                    $formsList->items->add ($page);
                    $formsList->selectedTab = $page->selector;

                    $name     = $page->text;
                    $selector = $designer->form->selector;
                    # $selector = $designer->form;
                }

                else
                {
                    $i = 1;
                    while (isset ($designer->objects[$name = $component . $i]))
                        ++$i;

                    $selector = $designer->createComponent (new ObjectType ("System.Windows.Forms.$component"), $name);

                    try
                    {
                        VoidEngine::setProperty ($selector, 'Text', $component);
                    }

                    catch (\Throwable $e) {}
                }

                $components = c('PropertiesPanel__SelectedComponent');

                $components->items->clear ();
                $components->items->addRange (array_keys ($designer->objects));

                $components->selectedItem = $name;
                $designer->setSelectedComponents ($selector);
            }

    MenuItem Menu__studio (text ('Среда'))
        MenuItem Menu__studio_restart (text ('Перезапустить'))
            ClickEvent:^ function ($self)
                {
                    $APPLICATION->restart ();
                }

        MenuItem Menu__studio_about (text ('О программе'))
            ClickEvent:^ function ($self)
                {
                    $msg = new MessageBox;

                    $msg->show
                    (
                        text ("Авторы сие произведения:\n\nАндрей Кусов (vk.com/postmessagea) - главный разработчик\nНикита Подвирный (vk.com/technomindlp) - разработчик\n\nWinForms PHP, vk.com/winforms\n\n-----------------------\n\n". file_get_contents (APP_DIR .'/license.txt')),

                        text ('О программе')
                    );
                }

        MenuItem Menu__studio_vk (text ('Группа вк'))
            ClickEvent:^ function ($self)
                {
                    run ('https://vk.com/winforms');
                }

    #^ Здесь тупая ошибка: я не могу обратиться к ->items->addRange... т.к. этот метод вызывается от имени
       Menu__studio_about. Типо, опять фиксить и всё такое, но мне влом пока что

    MenuItem Menu__studio
        ->items->addRange ([Menu__studio_restart, Menu__studio_about, Menu__studio_vk])

    MenuItem Menu__project (text ('Проект'))
        MenuItem Menu__project_run (text ('Запустить'))
            ClickEvent:^ function ($self)
                {
                    VoidStudioBuilder::buildProject (getenv ('Temp') .'/vstmpprj', Designer__FormsList->items->names[0]);

                    run (getenv ('Temp') .'/vstmpprj/system/core/WinForms PHP.exe');
                }

        MenuItem Menu__project_build (text ('Собрать'))
            ClickEvent:^ function ($self)
                {
                    VoidStudioAPI::getObjects ('build')['MainForm']->showDialog ();
                }

    MenuItem Menu__project
        ->items->addRange ([Menu__project_run, Menu__project_build])

    MainMenu Menu
        ->items->addRange ([Menu__studio, Menu__project])

#^ И тут тоже достаточно тупая ошибка:
   Я почему-то не могу обратиться к объект, который только что создал

Form MainForm
    menu: Menu

    ShownEvent:^ function ($self)
        {
            if (file_exists ('system/last_eval.php'))
                ToolsPanel__EvalEditor->text = file_get_contents ('system/last_eval.php');

            PropertiesList__List->selectedObject = Designer__Form1Designer->form->selector;
            # PropertiesList__List->selectedObject = Designer__Form1Designer->form;

            $time = round (microtime (true) - $GLOBALS['__debug']['start_time'], 4);

            ToolsPanel__LogList->items->add (text ('VoidStudio запущен за '. ($time > 0.5 ? $time : '[мало]') .' секунд'));
        }